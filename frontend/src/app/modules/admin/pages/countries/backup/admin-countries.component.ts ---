// admin-countries.component.ts
// Componente principal de "Administrar países"

import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { Country } from './models/country.model';
import { CountriesService } from './countries.service';

@Component({
  selector: 'app-admin-countries',
  templateUrl: './admin-countries.component.html',
  styleUrls: ['./admin-countries.component.scss']
})
export class AdminCountriesComponent implements OnInit {
  // ---- LISTADO Y FILTRO ----
  countries: Country[] = [];              // Todos los países
  filteredCountries: Country[] = [];      // Países filtrados/buscados
  page = 1;                               // Página seleccionada
  perPage = 25;                           // Países por página
  totalPages = 1;                         // Total de páginas
  searchTerm = '';                        // Término de búsqueda (input)

  // ---- SELECCIÓN Y ACCIONES ----
  selectedCountries: Country[] = [];      // Países seleccionados en la tabla
  // Aquí puedes configurar los botones de la toolbar si lo necesitas

  // ---- FORMULARIO MODAL ----
  form: FormGroup;
  isEditMode = false;                     // ¿Editar o añadir?
  showFormModal = false;                  // ¿Form visible?
  showConfirmModal = false;               // ¿Confirmación visible?
  editingCountry: Country|null = null;    // País que se edita  

  COUNTRY_EMPTY: Country = {
    id: '', alpha2may: '', alpha3may: '', numeric: '', defaultname: ''
  };

  constructor(private countriesService: CountriesService, private fb: FormBuilder) {
    // Definición del formulario reactivo Angular
    this.form = this.fb.group({
      id:          [''],
      alpha2may:   ['', Validators.required],
      alpha3may:   ['', Validators.required],
      numeric:     ['', Validators.required],
      defaultname: ['', Validators.required]
    });
  }

  ngOnInit(): void {
    // Cargar todos los países al arrancar
    this.countriesService.getAllCountries().subscribe((list) => {
      this.countries = list;
      this.resetPagination();
      this.applyFilters();
    });
  }

  // ---- FILTRO Y BÚSQUEDA ----
  applyFilters(): void {
    // Aplica el filtro de búsqueda al listado de países
    const filtro = this.searchTerm.toLowerCase();
    this.filteredCountries = this.countries.filter(
      c => c.defaultname.toLowerCase().includes(filtro)
    );
    this.totalPages = Math.ceil(this.filteredCountries.length / this.perPage) || 1;
  }
  resetPagination(): void {
    // Resetea la paginación al principio
    this.page = 1;
    this.totalPages = Math.ceil(this.countries.length / this.perPage) || 1;
  }

  // ---- SELECCIÓN ----
  onSelectCountry(country: Country, selected: boolean): void {
    // Añade o elimina países del array de seleccionados
    if (selected) {
      this.selectedCountries.push(country);
    } else {
      this.selectedCountries = this.selectedCountries.filter(c => c.id !== country.id);
    }
  }

  // ---- MODAL FORMULARIO ----
  startAddCountry(): void {
    // Prepara el formulario limpio para añadir país
    this.isEditMode = false;
    this.editingCountry = null;
    this.form.reset(this.COUNTRY_EMPTY);
    this.showFormModal = true;
  }

  startEditCountry(country: Country): void {
    // Prepara el formulario con datos para editar
    this.isEditMode = true;
    this.editingCountry = country;
    this.form.patchValue(country);
    this.showFormModal = true;
  }

  saveCountry(): void {
    // Guarda el país (ya sea nuevo o editado), cierra modal y refresca lista
    const datos: Country = this.form.value;
    if (this.isEditMode && this.editingCountry) {
      this.countriesService.updateCountry(datos).subscribe(() => this.reloadCountries());
    } else {
      this.countriesService.addCountry(datos).subscribe(() => this.reloadCountries());
    }
    this.showFormModal = false;
  }

  reloadCountries(): void {
    // Refresca todo tras guardar/borrar país
    this.countriesService.getAllCountries().subscribe((lista) => {
      this.countries = lista;
      this.applyFilters();
    });
  }

  // ---- BORRAR ----
  confirmDeleteCountries(): void {
    // Muestra el modal para confirmar el borrado
    this.showConfirmModal = true;
  }

  onConfirmDeletion(): void {
    // Borra los países seleccionados (tras confirmación)
    const ids = this.selectedCountries.map(c => c.id);
    this.countriesService.deleteCountries(ids).subscribe(() => {
      this.reloadCountries();
      this.selectedCountries = [];
      this.showConfirmModal = false;
    });
  }

  // ---- PAGINACIÓN ----
  nextPage(): void {
    if (this.page < this.totalPages) {
      this.page++;
      this.applyFilters();
    }
  }
  prevPage(): void {
    if (this.page > 1) {
      this.page--;
      this.applyFilters();
    }
  }
  changeItemsPerPage(n: number): void {
    this.perPage = n;
    this.page = 1;
    this.applyFilters();
  }
}
